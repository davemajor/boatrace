{"version":3,"file":"public/scripts/app.js","sources":["app/collections/bearings.coffee","app/initialize.coffee","app/lib/helpers.coffee","app/models/bearing.coffee","app/routers/main.coffee","app/views/appView.coffee","app/views/bearingsList.coffee","app/views/bearingsListItem.coffee","app/views/map.coffee","app/views/templates/bearingsList.hbs","app/views/templates/bearingsListItem.hbs","app/views/templates/map.hbs","app/views/templates/timer.hbs","app/views/timer.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;;ACAA;AAAA;AACA;AADA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnhEA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlrBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA","sourcesContent":["module.exports = class BearingsCollection extends Backbone.Collection\n    model: require 'models/bearing'\n    url: 'http://local'\n\n","@Hipster ?= {}\nHipster.Routers ?= {}\nHipster.Views ?= {}\nHipster.Models ?= {}\nHipster.Collections ?= {}\n\n# Load App Helpers\nrequire 'lib/helpers'\n\n# Initialize Router\nrequire 'routers/main'\n\nAppView = require 'views/appView'\n\n$ ->\n    # Initialize Backbone History\n    Backbone.history.start pushState: yes\n    Hipster.Views.AppView = new AppView\n\n","# Tell Swag where to look for partials\nSwag.Config.partialsPath = '../views/templates/'\n\n# Put your handlebars.js helpers here.\n","module.exports = class BearingModel extends Backbone.Model\n    defaults:\n        directionX: 'east'\n        directionY: 'north'\n\n    isValid: ->\n        @get('distance') > 0 && @get('degrees') >0","class MainRouter extends Backbone.Router\nmain = new MainRouter()\nmodule.exports = main\n","BearingsListView = require 'views/bearingsList'\nMapView = require 'views/map'\n\nmodule.exports = class AppViewView extends Backbone.View\n    className: 'appView'\n    el: '.app'\n\n    initialize: ->\n        Hipster.Views.BearingsListView = new BearingsListView\n        Hipster.Views.MapView = new MapView\n        \n        @render()\n\n    render: ->\n\n","BearingsListItemView = require 'views/bearingsListItem'\nBearingsCollection = require 'collections/bearings'\nBearingModel = require 'models/bearing'\nTimerView = require 'views/timer'\n\nmodule.exports = class BearingsListView extends Backbone.View\n    className: 'bearingsList'\n\n    template: require 'views/templates/bearingsList'\n    el: '.bearingsList'\n\n    initialize: ->\n        Hipster.Collections.Bearings = new BearingsCollection\n        Hipster.Collections.Bearings.on('add', @addNewItem)\n        @render()\n\n    render: ->\n        $(@el).html @template\n        Hipster.Views.TimerView = new TimerView\n        @triggerAdd()\n\n    addNewItem: (bearing) ->\n        view = new BearingsListItemView\n            model: bearing\n        $('.bearingsList ul').append view.render().el\n\n    triggerAdd: ->\n        Hipster.Collections.Bearings.add new BearingModel\n\n    triggerRace: ->\n        Hipster.Views.MapView.trigger 'race'\n\n    events: ->\n        'click .action-add-item': 'triggerAdd'\n        'click .action-race': 'triggerRace'\n\n","module.exports = class BearingsListItemView extends Backbone.View\n    className: 'bearingListItem'\n    tagName: 'li'\n    template: require 'views/templates/bearingsListItem'\n\n    initialize: ->\n        @listenTo(@model, 'destroy', @remove)\n\n    render: ->\n        $(@el).html @template\n        @\n\n    clear: ->\n        if Hipster.Collections.Bearings.length > 1\n            @model.destroy()\n\n    updateInput: (evt) ->\n        @model.set evt.currentTarget.name, evt.currentTarget.value\n\n    events: ->\n        'click .action-remove-item': \"clear\"\n        'change input': 'updateInput'\n        'keyup input': 'updateInput'\n        'keyup select': 'updateInput'\n        'keyup select': 'updateInput'","module.exports = class MapView extends Backbone.View\n    className: 'map'\n    el: '.map'\n    template: require 'views/templates/map'\n\n    initialize: ->\n        @speed = 20\n        @x = 100\n        @y = 100\n        @steps = []\n        @step = 0\n        @time = 0\n        @elapsed = 0\n        @render()\n        @timer = 0\n        @playing = false\n        @startTime = 0\n\n        @on 'race', @race, this\n        @on 'step', @drawStep, this\n        @on 'tick', @tick, this\n\n    reset: ->\n        clearTimeout(@timer)\n        @paper.clear()\n        @steps = []\n        @x = 100\n        @y = 100\n        @time = 0\n        @elapsed = 0\n        @step = 0\n        @boat = @paper.image(\"images/dot.png\", @x-11, @y-12, 22, 24)\n\n        buoys = [\n            {x: 140, y: 150},\n            {x: 260, y: 400},\n            {x: 350, y: 480},\n            {x: 460, y: 300}\n        ]\n        _.each buoys, (buoy) =>\n            @paper.circle buoy.x, buoy.y, 10\n\n        @boundary = @paper.path 'M{0} {1} L{2} {3} {4} {5} {6} {7}z',\n        buoys[0].x, buoys[0].y, buoys[1].x, buoys[1].y,\n        buoys[2].x, buoys[2].y, buoys[3].x, buoys[3].y\n\n    tick: ->\n        if @playing\n            @time += 100\n            @elapsed = Math.floor(@time / 1000) / 10\n            @elapsed += \".0\"  if Math.round(@elapsed) is @elapsed\n            Hipster.Views.TimerView.trigger 'update', @elapsed\n            diff = (new Date().getTime() - @startTime) - @time\n            @timer = setTimeout(=> @trigger 'tick', (100 - diff))\n\n    race: ->\n        @reset()\n        _.each Hipster.Collections.Bearings.models, (bearing) =>\n            if bearing.isValid()\n                @steps.push @makeMovement bearing\n            else\n                bearing.destroy()\n        if @steps.length > 0\n            @startTime = new Date().getTime()\n            @playing = true\n            @timer = setTimeout @tick(), 100\n            @drawStep()\n\n    drawStep: ->\n        attrs = {\"stroke-dasharray\":'.', 'stroke-width':'3', 'stroke': '#fff'}\n        if @step < @steps.length\n            $(\"path\").css('opacity', 0.4)\n            @paper.circle(@boat.attr(\"x\") + 11, @boat.attr(\"y\") + 12, 10).attr\n                fill: \"#0289FD\"\n                stroke: \"none\"\n                opacity: \"0.2\"\n\n            @paper.path(@steps[@step].path).attr attrs\n            lastPath = @paper.path(@steps[@step].pathRadial).attr attrs\n            @boat.animate(@steps[@step].animation).toFront()\n\n            # s = Raphael.pathIntersection @boundary.attr('path').toString(),\n            # @steps[@step].pathRadial\n\n            # if s.length > 0\n            #     @step = 'christ'\n            #     lastPath.remove()\n            #     @paper.path(@steps[@step].pathRadial).attr({\n            #         'stroke-dasharray':'.',\n            #         'stroke-width':'3',\n            #         'stroke': \"#ff0000\"\n            #     })\n\n            @step++\n        else\n            @playing = false\n\n    render: ->\n        @paper = Raphael(@el, '100%', '100%')\n        @reset()\n\n    makeMovement: (model) ->\n        dist = parseFloat model.get('distance')\n        deg = parseFloat model.get('degrees')\n        ew = model.get('directionX')\n        ns = model.get('directionY')\n\n        if ew == \"east\"\n            path = Raphael.format(\"M{0} {1} L {2} {3}\", @x, @y, @x + dist, @y)\n            if ns == \"north\"\n                newX = @x + dist * Math.sin((deg + 90) * Math.PI / 180)\n                newY = @y + dist * Math.cos((deg + 90) * Math.PI / 180)\n            else\n                newX = @x + dist * Math.sin((90 - deg) * Math.PI / 180)\n                newY = @y + dist * Math.cos((90 - deg) * Math.PI / 180)\n        else\n            path = Raphael.format(\"M{0} {1} L {2} {3}\", @x, @y, @x - dist, @y)\n            if ns == \"north\"\n                newX = @x + dist * Math.sin((270 - deg) * Math.PI / 180)\n                newY = @y + dist * Math.cos((270 - deg) * Math.PI / 180)\n            else\n                newX = @x + dist * Math.sin((deg + 270) * Math.PI / 180)\n                newY = @y + dist * Math.cos((deg + 270) * Math.PI / 180)\n        pathRadial = Raphael.format(\"M{0} {1} L {2} {3}\", @x, @y, newX, newY)\n        @x = newX\n        @y = newY\n\n        # Returns\n        path: path\n        pathRadial: pathRadial\n        animation: Raphael.animation(\n            x: newX - 11\n            y: newY - 12\n        , (dist / @speed) * 100, =>\n            @trigger 'step'\n        )","<div id=\"timer\"></div>\n<ul>\n</ul>\n<h4><i class=\"icon-plus action-add-item\"> Add New</i></h4>\n<button class=\"btn btn-success action-race\">Race</button>","<div class=\"row form-inline\">\n    Head\n    <input name=\"distance\" class=\"form-control input-small\" type=\"number\"> \n    miles at \n    <input name=\"degrees\" class=\"form-control input-small\" type=\"number\" min=\"0\" max=\"360\" step=\"1\"> degrees\n    \n    <select class=\"form-control input-small\" name=\"directionY\">\n      <option value=\"north\">north</option>\n      <option value=\"south\">south</option>\n    </select>\n   of\n    <select class=\"form-control input-small\" name=\"directionX\">\n      <option value=\"east\">east</option>\n      <option value=\"west\">west</option>\n    </select>\n\n<i class=\"icon-remove action-remove-item\"></i>\n</div>","<div id=\"map\"></div>","<h3>{{#if time }}<i class=\"icon-time\"></i>&nbsp;{{time}} seconds{{/if}}&nbsp;</h3>","module.exports = class TimerView extends Backbone.View\n    el: '#timer'\n    template: require 'views/templates/timer'\n\n    initialize: ->\n        @on 'update', @render\n        @render(null)\n\n    render: (time) ->\n        $('#timer').html @template\n            time: time\n"]}